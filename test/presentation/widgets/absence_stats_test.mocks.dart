// Mocks generated by Mockito 5.4.5 from annotations
// in absence_tracker_flutter/test/presentation/widgets/absence_stats_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:absence_tracker_flutter/domain/entities/absence.dart' as _i5;
import 'package:absence_tracker_flutter/domain/usecases/get_absences.dart'
    as _i2;
import 'package:absence_tracker_flutter/presentation/cubit/absence/absence_cubit.dart'
    as _i4;
import 'package:absence_tracker_flutter/presentation/cubit/absence/absence_state.dart'
    as _i3;
import 'package:flutter/material.dart' as _i7;
import 'package:flutter_bloc/flutter_bloc.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetAbsences_0 extends _i1.SmartFake implements _i2.GetAbsences {
  _FakeGetAbsences_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAbsenceState_1 extends _i1.SmartFake implements _i3.AbsenceState {
  _FakeAbsenceState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AbsenceCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbsenceCubit extends _i1.Mock implements _i4.AbsenceCubit {
  MockAbsenceCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetAbsences get getAbsences => (super.noSuchMethod(
        Invocation.getter(#getAbsences),
        returnValue: _FakeGetAbsences_0(
          this,
          Invocation.getter(#getAbsences),
        ),
      ) as _i2.GetAbsences);

  @override
  List<_i5.Absence> get allAbsences => (super.noSuchMethod(
        Invocation.getter(#allAbsences),
        returnValue: <_i5.Absence>[],
      ) as List<_i5.Absence>);

  @override
  _i3.AbsenceState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAbsenceState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.AbsenceState);

  @override
  _i6.Stream<_i3.AbsenceState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i3.AbsenceState>.empty(),
      ) as _i6.Stream<_i3.AbsenceState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> getAbsencesList() => (super.noSuchMethod(
        Invocation.method(
          #getAbsencesList,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void filterByType(_i5.AbsenceType? type) => super.noSuchMethod(
        Invocation.method(
          #filterByType,
          [type],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void filterByDateRange(_i7.DateTimeRange? range) => super.noSuchMethod(
        Invocation.method(
          #filterByDateRange,
          [range],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void filterByStatus(_i5.AbsenceStatus? status) => super.noSuchMethod(
        Invocation.method(
          #filterByStatus,
          [status],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> refreshList() => (super.noSuchMethod(
        Invocation.method(
          #refreshList,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  String generateICalData() => (super.noSuchMethod(
        Invocation.method(
          #generateICalData,
          [],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #generateICalData,
            [],
          ),
        ),
      ) as String);

  @override
  void setPageSize(int? size) => super.noSuchMethod(
        Invocation.method(
          #setPageSize,
          [size],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void nextPage() => super.noSuchMethod(
        Invocation.method(
          #nextPage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void prevPage() => super.noSuchMethod(
        Invocation.method(
          #prevPage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.AbsenceState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i9.Change<_i3.AbsenceState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
